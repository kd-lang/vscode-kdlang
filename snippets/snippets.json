{"snippet.assert":{"body":["assert ${1:expression}"],"description":"Code snippet for testing 'assert'","prefix":"as","scope":"kd,kdlang"},"snippet.break":{"body":["break$0"],"description":"Code snippet for 'break'","prefix":"br","scope":"kd,kdlang"},"snippet.const":{"body":["const ${1:name} = ${2:value}"],"description":"Code snippet for 'const'","prefix":"co","scope":"kd,kdlang"},"snippet.const.multiply":{"body":["const (","\t$0",")"],"description":"Code snippet for multiply 'const'","prefix":"cons","scope":"kd,kdlang"},"snippet.continue":{"body":["continue$0"],"description":"Code snippet for 'continue'","prefix":"con","scope":"kd,kdlang"},"snippet.defer":{"body":["defer {","\t$0","}"],"description":"Code snippet for 'defer' block","prefix":"def","scope":"kd,kdlang"},"snippet.else":{"body":["else {","\t$0","}"],"description":"Code snippet for 'else' statement","prefix":"el","scope":"kd,kdlang"},"snippet.elseif":{"body":["else if ${1:expression} {","\t$0","}"],"description":"Code snippet for 'else if' statement","prefix":"elf","scope":"kd,kdlang"},"snippet.enum":{"body":["enum ${1:name} {","\t$0","}"],"description":"Code snippet for 'enum'","prefix":"en","scope":"kd,kdlang"},"snippet.flag":{"body":["#flag ${1:-flag}"],"description":"Code snippet for '#flag'","prefix":"fl","scope":"kd,kdlang"},"snippet.fn.eprint":{"body":["eprint('${1:text}')"],"description":"Code snippet for standart based function 'eprint'","prefix":"epr","scope":"kd,kdlang"},"snippet.fn.eprintln":{"body":["eprintln('${1:text}')"],"description":"Code snippet for standart based function 'eprintln'","prefix":"eprl","scope":"kd,kdlang"},"snippet.fn.init":{"body":["fn init() {","\t$0","}"],"description":"Code snippet for 'init' function","prefix":"finit","scope":"kd,kdlang"},"snippet.fn.main":{"body":["fn main() {","\t$0","}"],"description":"Code snippet for 'main' function","prefix":"fmain","scope":"kd,kdlang"},"snippet.fn.print":{"body":["print('${1:text}')"],"description":"Code snippet for standart based function 'print'","prefix":"pr","scope":"kd,kdlang"},"snippet.fn.println":{"body":["println('${1:text}')"],"description":"Code snippet for standart based function 'println'","prefix":"prl","scope":"kd,kdlang"},"snippet.for":{"body":["for {","\t$0","}"],"description":"Code snippet for pure infinity loop 'for'","prefix":"for","scope":"kd,kdlang"},"snippet.for.index":{"body":["for ${1:i} := 0; $1 < ${3:count}; $1++ {","\t$0","}"],"description":"Code snippet for index loop 'for'","prefix":"for","scope":"kd,kdlang"},"snippet.foreach":{"body":["for ${1:variable} in ${2:array} {","\t$0","}"],"description":"Code snippet for foreach 'for'","prefix":"fore","scope":"kd,kdlang"},"snippet.foreach.index":{"body":["for ${1:_}, ${2:variable} in ${3:array} {","\t$0","}"],"description":"Code snippet for index based loop 'for'","prefix":"fore","scope":"kd,kdlang"},"snippet.function":{"body":["fn ${1:name}() {","\t$0","}"],"description":"Code snippet for function 'fn'","prefix":"fn","scope":"kd,kdlang"},"snippet.go":{"body":["go ${1:function}($0)"],"description":"Code snippet for concurrency 'go'","prefix":"go","scope":"kd,kdlang"},"snippet.goto":{"body":["goto ${1:label}"],"description":"Code snippet for 'goto' label","prefix":"got","scope":"kd,kdlang"},"snippet.if":{"body":["if ${1:expression} {","\t$0","}"],"description":"Code snippet for 'if' statement","prefix":"if","scope":"kd,kdlang"},"snippet.if.compile":{"body":["\\$if ${1:expression} {","\t$0","}"],"description":"Code snippet for compile time 'if'","prefix":"$i","scope":"kd,kdlang"},"snippet.ifelse":{"body":["if ${1:expression} {","\t$0","} else {","\t$0","}"],"description":"Code snippet for 'if-else' statement","prefix":"ie","scope":"kd,kdlang"},"snippet.import":{"body":["import ${1:module}"],"description":"Code snippet for 'import' module","prefix":"imp","scope":"kd,kdlang"},"snippet.include":{"body":["#include <${1:name}>"],"description":"Code snippet for C '#include'","prefix":"inc","scope":"kd,kdlang"},"snippet.interface":{"body":["interface ${1:name} {$0}"],"description":"Code snippet for 'interface'","prefix":"inte","scope":"kd,kdlang"},"snippet.map":{"body":["map[${1:key}]${2:value}{$0}"],"description":"Code snippet for 'map'","prefix":"map","scope":"kd,kdlang"},"snippet.match":{"body":["match ${1:expression} {","\t$0","}"],"description":"Code snippet for 'match' statement","prefix":"ma","scope":"kd,kdlang"},"snippet.module":{"body":["module ${1:name}"],"description":"Code snippet for 'module'","prefix":"mod","scope":"kd,kdlang"},"snippet.public.function":{"body":["pub fn ${1:name}() {","\t$0","}"],"description":"Code snippet for public function 'pub fn'","prefix":"pub","scope":"kd,kdlang"},"snippet.return":{"body":["return ${1:value}"],"description":"Code snippet for 'return'","prefix":"ret","scope":"kd,kdlang"},"snippet.struct":{"body":["struct ${1:Name} {","\t$0","}"],"description":"Code snippet for 'struct'","prefix":"stru","scope":"kd,kdlang"},"snippet.type":{"body":["type ${1:name} = ${2:type}"],"description":"Code snippet for 'type' definition","prefix":"ty","scope":"kd,kdlang"},"snippet.type.bool":{"body":["bool"],"description":"Code snippet for Boolean","prefix":"bool","scope":"kd,kdlang"},"snippet.type.byte":{"body":["byte"],"description":"Code snippet for Unsigned 8-bit Integer","prefix":"byte","scope":"kd,kdlang"},"snippet.type.byteptr":{"body":["byteptr"],"description":"Code snippet for Byte*","prefix":"bptr","scope":"kd,kdlang"},"snippet.type.f32":{"body":["f32"],"description":"Code snippet for 32-bit FloatingPoint","prefix":"float","scope":"kd,kdlang"},"snippet.type.f64":{"body":["f64"],"description":"Code snippet for 64-bit FloatingPoint","prefix":"float64","scope":"kd,kdlang"},"snippet.type.i8":{"body":["i8"],"description":"Code snippet for Signed 8-bit Integer","prefix":"int8","scope":"kd,kdlang"},"snippet.type.i16":{"body":["i16"],"description":"Code snippet for Signed 16-bit Integer","prefix":"int16","scope":"kd,kdlang"},"snippet.type.i64":{"body":["i64"],"description":"Code snippet for Signed 64-bit Integer","prefix":"int64","scope":"kd,kdlang"},"snippet.type.int":{"body":["int"],"description":"Code snippet for Signed 32-bit Integer","prefix":"int","scope":"kd,kdlang"},"snippet.type.rune":{"body":["rune"],"description":"Code snippet for Represents a Unicode CodePoint","prefix":"rune","scope":"kd,kdlang"},"snippet.type.string":{"body":["string"],"description":"Code snippet for String","prefix":"str","scope":"kd,kdlang"},"snippet.type.u16":{"body":["u16"],"description":"Code snippet for Unsigned 16-bit Integer","prefix":"u16","scope":"kd,kdlang"},"snippet.type.u32":{"body":["u32"],"description":"Code snippet for Unsigned 32-bit Integer","prefix":"u32","scope":"kd,kdlang"},"snippet.type.u64":{"body":["u64"],"description":"Code snippet for Unsigned 64-bit Integer","prefix":"u64","scope":"kd,kdlang"},"snippet.type.voidptr":{"body":["voidptr"],"description":"Code snippet for void*","prefix":"vptr","scope":"kd,kdlang"},"snippet.type.charptr":{"body":["charptr"],"description":"Code snippet for char*","prefix":"cptr","scope":"kd,kdlang"}}
